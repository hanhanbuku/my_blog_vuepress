(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{420:function(e,s,v){e.exports=v.p+"assets/img/pnpm_1.9960f4b9.png"},421:function(e,s,v){e.exports=v.p+"assets/img/pnpm_2.0b7ef96d.png"},422:function(e,s,v){e.exports=v.p+"assets/img/pnpm_3.7df81f68.png"},512:function(e,s,v){"use strict";v.r(s);var a=v(0),_=Object(a.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),s("blockquote",[s("p",[e._v("最近写了一个基于monorepo的管理系统，将装修组件库和一些工具包拆分了出来，方便在别的项目复用。在开发过程中体验到了monorepo的方便同时也遇到了一些痛点，本文就展开说一下如何搭建一个monorepo工程以及如何解决开发过程中遇到的痛点")])]),e._v(" "),s("h2",{attrs:{id:"什么是monorepo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是monorepo"}},[e._v("#")]),e._v(" 什么是monorepo")]),e._v(" "),s("blockquote",[s("p",[e._v("引用网上的一段话：")]),e._v(" "),s("p",[e._v("Monorepo 是一种项目"),s("code",[e._v("代码管理方式")]),e._v("，指单个仓库中管理多个项目，有助于简化"),s("code",[e._v("代码共享")]),e._v("、"),s("code",[e._v("版本控制")]),e._v("、"),s("code",[e._v("构建和部署")]),e._v("等方面的复杂性，并提供更好的"),s("code",[e._v("可重用性")]),e._v("和"),s("code",[e._v("协作性")]),e._v("。Monorepo 提倡了开放、透明、共享的组织文化，这种方法已经被很多大型公司广泛使用，如 Google、Facebook 和 Microsoft 等。")])]),e._v(" "),s("p",[e._v("总结一下monorepo就是把多个项目的代码放在同一个仓库中管理，这样对某些工具的"),s("code",[e._v("抽离")]),e._v("以及基建的"),s("code",[e._v("复用")]),e._v("是非常友好的，尤其是在面对一些"),s("code",[e._v("相似度")]),e._v("非常高的项目的时候就特别好用。目前也是有很多开源大项目都采取这种方式去管理代码")]),e._v(" "),s("h2",{attrs:{id:"pnpm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pnpm"}},[e._v("#")]),e._v(" pnpm")]),e._v(" "),s("p",[s("code",[e._v("pnpm")]),e._v("和"),s("code",[e._v("npm")]),e._v("、"),s("code",[e._v("yarn")]),e._v("一样，也是一个包管理工具，官网对他是这样介绍的")]),e._v(" "),s("ul",[s("li",[e._v("pnpm 比其他包管理器快"),s("code",[e._v("2")]),e._v(" 倍")]),e._v(" "),s("li",[e._v("node_modules 中的文件为复制或链接自特定的"),s("code",[e._v("内容寻址存储库")])]),e._v(" "),s("li",[e._v("pnpm 内置支持"),s("code",[e._v("单仓多包")])]),e._v(" "),s("li",[e._v("pnpm 默认创建了一个"),s("code",[e._v("非平铺")]),e._v("的 node_modules，因此代码"),s("code",[e._v("无法访问")]),e._v("任意包")])]),e._v(" "),s("p",[e._v("这里简单说一下"),s("code",[e._v("pnpm")]),e._v("的好处，以及他对于我们的"),s("code",[e._v("monorepo")]),e._v("工程有什么帮助:")]),e._v(" "),s("h3",{attrs:{id:"pnpm有着独特的包管理机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pnpm有着独特的包管理机制"}},[e._v("#")]),e._v(" pnpm有着独特的包管理机制")]),e._v(" "),s("blockquote",[s("p",[e._v("pnpm会将安装过的包"),s("code",[e._v("缓存")]),e._v("在磁盘中，当你下次再次安装他会从磁盘中直接拉取包过来，效率更高")])]),e._v(" "),s("h3",{attrs:{id:"非平铺的node-modules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非平铺的node-modules"}},[e._v("#")]),e._v(" 非平铺的node_modules")]),e._v(" "),s("blockquote",[s("p",[e._v("pnpm创建了一个"),s("code",[e._v("非平铺")]),e._v("的"),s("code",[e._v("node_modules")]),e._v("。大家都知道在"),s("code",[e._v("npm")]),e._v("和"),s("code",[e._v("yarn")]),e._v("中会存在一个"),s("code",[e._v("幽灵依赖")]),e._v("的问题，也就是我们下载的依赖可能还会依赖别的包，而由于"),s("code",[e._v("npm")]),e._v("的"),s("code",[e._v("平铺机制")]),e._v("，会导致我们可以引入这些依赖的依赖。这就很容易导致出问题，\n这里不对三个包管理工具做太多的介绍了，感兴趣的可以自行了解一下。而有过"),s("code",[e._v("pnpm")]),e._v("使用经验的小伙伴都知道，"),s("code",[e._v("pnpm")]),e._v("会把依赖的依赖统一放在"),s("code",[e._v(".pnpm")]),e._v("这个文件夹下管理，而我们下载依赖则会放置在"),s("code",[e._v(".pnpm同级")]),e._v("，然后pnpm通过自身"),s("code",[e._v("软连接")]),e._v("的形式关联起这些包，这样就避免了我们可以直接引入"),s("code",[e._v("幽灵依赖")]),e._v("的问题。")])]),e._v(" "),s("h3",{attrs:{id:"对monorepo的支持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对monorepo的支持"}},[e._v("#")]),e._v(" 对monorepo的支持")]),e._v(" "),s("blockquote",[s("p",[e._v("在介绍这个特点之前我们首先要明白，一个"),s("code",[e._v("monorepo")]),e._v("的项目需要解决哪些问题？首先是"),s("code",[e._v("公共依赖的管理")]),e._v("，"),s("code",[e._v("对子包操作的便捷度")]),e._v("（例如批量执行子包的脚本或者单独操作某些子包之类的）。\n在"),s("code",[e._v("pnpm")]),e._v("之前大部分都是通过"),s("code",[e._v("workspace+lerna")]),e._v("。我并没有使用过，但是从网上查阅的资料看来，使用过程挺繁琐的并不简单。在"),s("code",[e._v("monorepo")]),e._v("中有一个非常常见的场景，就是包和包之间存在依赖关系，在"),s("code",[e._v("npm和yarn")]),e._v("里面我们需要使用"),s("code",[e._v("workspace")]),e._v("这个功能并且通过"),s("code",[e._v("npm link")]),e._v("来关连起有依赖关系的包（这么做的好处是为了开发阶段联调的方便）。而"),s("code",[e._v("pnpm")]),e._v("自带了"),s("code",[e._v("workspace")]),e._v("，并且提供了相关命令可以自由的"),s("code",[e._v("筛选")]),e._v("子包\n这样无论是"),s("code",[e._v("公共依赖")]),e._v("的管理以及为某个子包单独安装独有的依赖都非常的方便简单")])]),e._v(" "),s("p",[e._v("关于pnpm的介绍就说到这里。")]),e._v(" "),s("h2",{attrs:{id:"开始"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开始"}},[e._v("#")]),e._v(" 开始")]),e._v(" "),s("p",[e._v("学习完前置的知识，下面就开始着手去搭建一个基于pnpm的monorepo工程")]),e._v(" "),s("p",[e._v("首先安装一下"),s("code",[e._v("pnpm")])]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-g")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("pnpm")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("新建一个文件夹然后进入文件夹初始化一下项目")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("pnpm")]),e._v(" init \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("接着我们在根目录创建一个"),s("code",[e._v("packages")]),e._v("文件夹，用于存放我们的所有子项目,接着我们去"),s("code",[e._v("packages")]),e._v("下创建两个项目。")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("pnpm")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("pnpm")]),e._v(" create vite app1\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("pnpm")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("pnpm")]),e._v(" create vite app2\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("此时我们开启"),s("code",[e._v("workspace")]),e._v("，创建一个"),s("code",[e._v("pnpm-workspace.yaml")]),e._v("文件")]),e._v(" "),s("div",{staticClass:"language-yaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("packages")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'packages/*'")]),e._v("\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("这样表示"),s("code",[e._v("packages")]),e._v("下所有的文件夹都处于"),s("code",[e._v("workspace")]),e._v("内，他们就可以共享公共依赖了。")]),e._v(" "),s("p",[e._v("此时我们安装一下依赖")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("pnpm")]),e._v(" i\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("安装完成之后我们的项目目录将会是这个样子\n"),s("img",{staticClass:"img",attrs:{src:v(420)}})]),e._v(" "),s("p",[e._v("可以看到，不光子项目下有"),s("code",[e._v("node_modules")]),e._v("，根目录也有一个。子项目下的是他自己独有的一些依赖，而根目录下的就是用来管理所有的公共依赖了。并且可以看到根目录下的"),s("code",[e._v("node_modules")]),e._v("里面有一个"),s("code",[e._v(".pnpm")]),e._v("文件夹，而子项目是没有的，并且打开子项目中的一个依赖包的依赖文件可以看到，里面除了一些"),s("code",[e._v("bin")]),e._v("命令外没有任何东西。因为这些依赖都被放到了"),s("code",[e._v(".pnpm")]),e._v("文件夹内了。")]),e._v(" "),s("p",[e._v("至此，一个非常简单的"),s("code",[e._v("monorepo")]),e._v("工程就算是搭建完毕了。下面来讲如果建立包和包之间的依赖关系。")]),e._v(" "),s("p",[e._v("此时我们再创建一个"),s("code",[e._v("util")]),e._v("的子包，作为公共的工具包。")]),e._v(" "),s("p",[e._v("然后我们将他安装到"),s("code",[e._v("app1")]),e._v("中")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("pnpm")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" util "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-r")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-F")]),e._v(" app1\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v("-F")]),e._v("是"),s("code",[e._v("-filter")]),e._v("的简写，就是找到"),s("code",[e._v("app1")]),e._v("这个子包。而被安装的包"),s("code",[e._v("pnpm")]),e._v("会优先在工作空间找，没找到才回去"),s("code",[e._v("npm")]),e._v("上下载。")]),e._v(" "),s("img",{staticClass:"img",attrs:{src:v(421)}}),e._v(" "),s("p",[e._v("可以看到，"),s("code",[e._v("util")]),e._v("这个包已经作为依赖被安装进了"),s("code",[e._v("app1")]),e._v("中，并且版本号是以"),s("code",[e._v("workspace")]),e._v("开头的。这个再构建过程中"),s("code",[e._v("pnpm")]),e._v("会自动帮我们替换成最新的版本。")]),e._v(" "),s("p",[e._v("通过这样的操作之后，就可以即时的开发两个包并且相互感知更新了。无需再使用"),s("code",[e._v("npm link")]),e._v("。")]),e._v(" "),s("p",[e._v("此时假设我们开发好了项目，需要统一执行构建，应该怎么做呢？别急，我们同样可以根据"),s("code",[e._v("pnpm")]),e._v("提供的"),s("code",[e._v("-f")]),e._v("命令操作")]),e._v(" "),s("div",{staticClass:"language-json line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"build:all"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"pnpm -r --filter=./packages/* run build"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("在根目录的"),s("code",[e._v("package.json")]),e._v("中添加这样一行命令，"),s("code",[e._v("pnpm")]),e._v("就会去找到所有"),s("code",[e._v("packages")]),e._v("下的包，并且执行"),s("code",[e._v("build")]),e._v("命令。")]),e._v(" "),s("p",[e._v("此时可能有些同学会有疑惑，我的子包之间有依赖关系，这样统一执行他的"),s("code",[e._v("构建顺序")]),e._v("是怎样的呢？")]),e._v(" "),s("p",[s("code",[e._v("pnpm")]),e._v("在这一点上也同样做了处理，他在构建阶段会去进行一个构建的"),s("code",[e._v("调度")]),e._v("，自动的检测出子包之间是否存在依赖关系，存在依赖关系的话会"),s("code",[e._v("优先构建")]),e._v("被依赖的子包，然后再构建你的主包。效果这里就不贴图了，可以自己去试一试。")]),e._v(" "),s("h2",{attrs:{id:"痛点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#痛点"}},[e._v("#")]),e._v(" 痛点")]),e._v(" "),s("p",[e._v("经过上面这些步骤之后，一个"),s("code",[e._v("monorepo")]),e._v("的工程就可以正常的开发了。下面来说一下开发过程中会遇到的痛点以及解决方案。主要还是集中在"),s("code",[e._v("工程化管理")]),e._v("这一块")]),e._v(" "),s("h3",{attrs:{id:"关于changelog的生成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于changelog的生成"}},[e._v("#")]),e._v(" 关于changelog的生成")]),e._v(" "),s("p",[e._v("当我们在发版之前生成本次开发内容的"),s("code",[e._v("changelog")]),e._v("是一个很有必要的步骤。他就像"),s("code",[e._v("git")]),e._v("提交记录一样可以帮我们记录每次发版的内容。平时大家应该都是通过"),s("code",[e._v("conventional-changelog-cli")]),e._v("这个库去获取"),s("code",[e._v("commit")]),e._v("提交记录来生成"),s("code",[e._v("changelog")]),e._v("的。很显然这个方案在"),s("code",[e._v("monorepo")]),e._v("中显得不够灵活。\n比"),s("code",[e._v("conventional-changelog-cli")]),e._v("更适合"),s("code",[e._v("monorepo")]),e._v("的是"),s("code",[e._v("changeset")]),e._v("这个库，它可以获取到你的所有子包并且为每个子包定制自己的"),s("code",[e._v("changelog")]),e._v("，但是使用起来会比较麻烦。不过目前我没有发现比他更合适的工具了。")]),e._v(" "),s("p",[e._v("详细的使用方法可以看一下这篇"),s("a",{attrs:{href:"https://hanhanbuku.github.io/my_blog_vuepress/pages/deef6e/",target:"_blank",rel:"noopener noreferrer"}},[e._v("文章"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"关于构建效率的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于构建效率的问题"}},[e._v("#")]),e._v(" 关于构建效率的问题")]),e._v(" "),s("p",[e._v("对于构建这一块，在日常开发过程中，并不是每次开发任务都会去动到所有的子包。可能这次我只修改了"),s("code",[e._v("a")]),e._v("包，下次只需改了"),s("code",[e._v("c")]),e._v("包和"),s("code",[e._v("d")]),e._v("包。那没有被修改的包肯定不需要"),s("code",[e._v("重复")]),e._v("的去构建了。对于这种情况如果我们"),s("code",[e._v("单一执行")]),e._v("每个包的构建显然不太明智，而如果"),s("code",[e._v("统一执行")]),e._v("构建又会出现"),s("code",[e._v("重复构建")]),e._v("的问题。")]),e._v(" "),s("p",[e._v("而关于这些问题最开始我想到的是通过在"),s("code",[e._v("ci")]),e._v("中判断"),s("code",[e._v("不同分支名")]),e._v("来执行不同的构建命令。这样做虽然能解决问题但是毫无扩展性可言，加一个新包就需要去加条新的构建命令和他的构建分支。最理想的情况就是，有没有一种方法能检测当前哪些包更新了哪些包没有更新然后只去构建那些已经更新了的包呢？")]),e._v(" "),s("p",[e._v("答案当然是有的，那就是"),s("code",[e._v("turbo")]),e._v("。")]),e._v(" "),s("p",[e._v("关于"),s("code",[e._v("turbo")]),e._v("的介绍这里也简单说下")]),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("Turborepo")]),e._v(" 是一个为 "),s("code",[e._v("monorepo")]),e._v(" 而生的极快的构建系统。目的是为了解决大型"),s("code",[e._v("monorepo")]),e._v(" 项目构建速度缓慢的一大痛点。"),s("code",[e._v("turbo")]),e._v("的核心是永远不会重新构建已经构建过的内容。"),s("code",[e._v("turbo")]),e._v(" 会把每次构建的产物与日志缓存起来，下次构建时只有文件发生变动的部分才会重新构建，没有变动的直接命中缓存并重现日志。"),s("code",[e._v("turbo")]),e._v("拥有更智能的任务调度程序，充分利用空闲 "),s("code",[e._v("CPU")]),e._v("，使得整体构建速度更快。另外，"),s("code",[e._v("turbo")]),e._v(" 还具有远程缓存功能，可以与团队和 "),s("code",[e._v("CI/CD")]),e._v(" 共享构建缓存。")])]),e._v(" "),s("p",[e._v("提取一下重要信息，"),s("code",[e._v("turbo 的核心是永远不会重新构建已经构建过的内容")]),e._v("，由于"),s("code",[e._v("turbo")]),e._v("在构建过程中会产生一个"),s("code",[e._v("缓存文件")]),e._v("，并且他会检测你的代码"),s("code",[e._v("有无更新")]),e._v("，没有更新就直接"),s("code",[e._v("复用")]),e._v("缓存。这不就正好能解决上面讲的问题了吗。\n关于"),s("code",[e._v("turbo")]),e._v("的介绍后面会再开一篇文章细说。这里先介绍一下在项目中的使用")]),e._v(" "),s("p",[e._v("首先安装"),s("code",[e._v("turbo")])]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("pnpm")]),e._v(" i turbo\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("在根目录创建一个"),s("code",[e._v("turbo.json")]),e._v("的配置文件")]),e._v(" "),s("div",{staticClass:"language-json line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"$schema"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://turborepo.org/schema.json"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"pipeline"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"build"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"dependsOn"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"^build"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"outputs"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"dist/**"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[s("code",[e._v("pipeline")]),e._v("里面配置的就是"),s("code",[e._v("turbo")]),e._v("的命令，这里我们配置了一个"),s("code",[e._v("build")]),e._v("命令。让他去执行所有的"),s("code",[e._v("build")]),e._v("命令。并且将缓存产物输出在"),s("code",[e._v("dist")]),e._v("文件夹下。")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("turbo run build\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("执行此命令即可开始打包。当你多次打包后你就会发现"),s("code",[e._v("turbo")]),e._v("会自动的去命中缓存，而不会重复打包。大大的缩减的构建时间")]),e._v(" "),s("img",{staticClass:"img",attrs:{src:v(422)}}),e._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),s("p",[e._v("以上就是关于本文的全部内容，主要介绍了一下一个"),s("code",[e._v("monorepo")]),e._v("工程适用哪些工具。如果没有一套完善的工具体系去支撑，"),s("code",[e._v("monorepo")]),e._v("也会变得一团糟。\n顺便贴一下我写的管理系统的地址，关于"),s("code",[e._v("monorepo")]),e._v("有不明白的东西可以去看看项目里是怎么做的"),s("a",{attrs:{href:"https://gitee.com/wangyuhan123/notcool-admin-template",target:"_blank",rel:"noopener noreferrer"}},[e._v("NOTCOOL"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=_.exports}}]);